name: External Tests

on:
  push:
    paths-ignore:
    - 'docs/**'
    - '.github/ISSUE_TEMPLATE/**'
    - '.github/*.yml'
    - 'LICENSE.txt'
    - '*.md'
    - '*.sh'
    branches:
    - master
  pull_request:
    branches:
    - master

concurrency:
  group: external-tests-${{ github.ref }}
  cancel-in-progress: true

env:
  CTEST_OUTPUT_ON_FAILURE: 1
  CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm_modules

jobs:

  # {{{ build fontconfig
  build_fontconfig:
    name: "Build patched fontconfig"
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: "get source"
      run: |
        cat /etc/apt/sources.list
        sudo tee -a /etc/apt/sources.list < <(echo "deb-src http://azure.archive.ubuntu.com/ubuntu/ focal main restricted")
        cat /etc/apt/sources.list
        sudo apt update
        apt source libfontconfig1
        sudo apt install -y gperf
        ls -hl
    - name: "patch it"
      run: |
        set -ex
        cd fontconfig-2.13.1
        patch --verbose -p1 < ../.github/fontconfig-memleak-fix.patch
    - name: "configure"
      run: |
        set -ex
        export CFLAGS="-O0 -ggdb3"
        cd fontconfig-2.13.1
        mkdir build
        cd build
        ../configure --prefix="/home/runner/opt/fontconfig"
    - name: "build & install"
      run: |
        set -ex
        cd fontconfig-2.13.1/build
        make -j3
        make install
    - name: "Uploading artifact"
      uses: actions/upload-artifact@v2
      with:
        name: "patched-fontconfig"
        path: "/home/runner/opt/fontconfig"
        if-no-files-found: error
        retention-days: 3
  # }}}

  # {{{ Build Contour
  build_contour:
    name: "Build Contour @ Ubuntu Linux 20.04"
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ccache-ubuntu_2004-external-tests
        max-size: 256M
    - uses: actions/cache@v2
      with:
        path: "**/cpm_modules"
        key: ${{github.workflow}}-cpm-modules-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
    - name: set environment variables
      id: set_vars
      run: ./scripts/ci-set-vars.sh
      env:
        REPOSITORY: ${{ github.event.repository.name }}
    - name: "install dependencies"
      run: |
        set -ex
        sudo apt -q update
        sudo ./scripts/install-deps.sh
    - name: "create build directory"
      run: mkdir build
    - name: "cmake"
      env:
        EXTRA_CMAKE_FLAGS: "-DCONTOUR_BLUR_PLATFORM_KWIN=ON -DCONTOUR_SANITIZE=address"
        CMAKE_BUILD_TYPE: Debug
      run: ./scripts/ci-prepare-contour.sh
    - name: "build"
      run: cmake --build build/ -- -j3
    - name: "test: crispy"
      run: ./build/src/crispy/crispy_test
    - name: "test: libterminal"
      run: ./build/src/terminal/terminal_test
    - name: "CPack: Creating DEB & TGZ package"
      run: |
        set -ex
        cd build/
        cpack -G DEB
        cpack -G TGZ
        cd ..
        mv -v "build/Contour-${{ steps.set_vars.outputs.VERSION_STRING }}-Linux.deb" \
              "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-ubuntu_20_04_amd64.deb"
        tar xzpf "build/Contour-${{ steps.set_vars.outputs.VERSION_STRING }}-Linux.tar.gz"
        mv -v "Contour-${{ steps.set_vars.outputs.VERSION_STRING }}-Linux" \
              "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-ubuntu_20_04_amd64"
        ls -hl
    - name: "Uploading artifact .deb package"
      uses: actions/upload-artifact@v2
      with:
        name: "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-ubuntu_20_04_amd64.deb"
        path: "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-ubuntu_20_04_amd64.deb"
        if-no-files-found: error
        retention-days: 7
  # }}}

  # {{{ external test: notcurses

  build_notcurses:
    name: "Build notcurses"
    runs-on: ubuntu-20.04
    steps:
    - name: "install dependencies"
      run: |
        set -ex
        sudo apt -q update
        sudo apt install -y \
                    build-essential \
                    cmake \
                    doctest-dev \
                    ffmpeg \
                    libavcodec-dev \
                    libavformat-dev \
                    libavutil-dev \
                    libdeflate-dev \
                    libncurses-dev \
                    libqrcodegen-dev \
                    libswscale-dev \
                    libunistring-dev \
                    xvfb
    - name: "git clone"
      run: git clone https://github.com/dankamongmen/notcurses.git
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ccache-ubuntu_2004-notcurses
        max-size: 256M
    - name: "configure cmake"
      run: |
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX=~/opt/notcurses \
              -DCMAKE_C_COMPILER_LAUNCHER=ccache \
              -DUSE_CPP=OFF \
              -DUSE_DEFLATE=OFF \
              -DUSE_MULTIMEDIA=ffmpeg \
              -DUSE_PANDOC=OFF \
              -DUSE_STATIC=ON \
              -S notcurses \
              -B notcurses/build
    - name: "Build notcurses"
      run: cmake --build notcurses/build/ -- -j3
    - name: "Install notcurses"
      run: cmake --build notcurses/build --config Release --target install/strip
    - name: "Uploading artifact"
      uses: actions/upload-artifact@v2
      with:
        name: "notcurses-install"
        path: ~/opt/notcurses
        if-no-files-found: error
        retention-days: 1

  test_notcurses:
    name: "notcurses-demo ${{ matrix.name }}"
    runs-on: ubuntu-20.04
    needs: [build_contour, build_notcurses, build_fontconfig]
    strategy:
      fail-fast: false
      matrix:
        # ixetunchmdbkywjgarvlsfqzo
        include:
          - name: 'aanimate'
            id: 'a'
          - name: 'box'
            id: 'b'
          - name: 'chunli'
            id: 'c'
          - name: 'dragon'
            id: 'd'
          - name: 'eagle'
            id: 'e'
          - name: 'fission'
            id: 'f'
          - name: 'grid'
            id: 'g'
          - name: 'highcon'
            id: 'h'
          - name: 'intro'
            id: 'i'
          - name: 'jungle'
            id: 'j'
          - name: 'keller'
            id: 'k'
          - name: 'luigi'
            id: 'l'
          - name: 'mojibake'
            id: 'm'
          - name: 'normal'
            id: 'n'
          - name: 'outro'
            id: 'o'
          - name: 'qrcode'
            id: 'q'
          - name: 'reel'
            id: 'r'
          - name: 'sliders'
            id: 's'
          - name: 'trans'
            id: 't'
          - name: 'uniblock'
            id: 'u'
          - name: 'view'
            id: 'v'
          - name: 'whiteout'
            id: 'w'
          - name: 'xray'
            id: 'x'
          - name: 'yield'
            id: 'y'
          - name: 'zoo'
            id: 'z'
    env:
      LD_LIBRARY_PATH: /home/runner/opt/notcurses/lib:/home/runner/opt/fontconfig/lib
    steps:
    - uses: actions/checkout@v2
    - name: set environment variables
      id: set_vars
      run: ./scripts/ci-set-vars.sh
      env:
        REPOSITORY: ${{ github.event.repository.name }}
    - uses: actions/download-artifact@v2
      with:
        name: "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-ubuntu_20_04_amd64.deb"
    - uses: actions/download-artifact@v2
      with:
        name: "notcurses-install"
        path: ~/opt/notcurses
    - uses: actions/download-artifact@v2
      with:
        name: "patched-fontconfig"
        path: "/home/runner/opt/fontconfig"
    - name: "fix executable bits"
      run: |
        chmod 0755 ~/opt/notcurses/bin/*
        chmod 0755 ~/opt/*/lib/*
        ls -hlR ~/opt/
    - name: "install dependencies"
      run: ./scripts/ci/notcurses-install-deps.sh
    - name: "Run notcurses-demo -h"
      timeout-minutes: 1
      run: ~/opt/notcurses/bin/notcurses-demo -p ~/opt/notcurses/share/notcurses -h
    - name: "install contour"
      run: sudo dpkg -i "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-ubuntu_20_04_amd64.deb"
    - name: "contour executable test"
      run: |
        contour version
        contour help
        ls -hl ~/opt/notcurses/
    - name: "Run Contour: notcurses-demo ${{ matrix.name }}"
      timeout-minutes: 5
      id: Xvfb-contour-notcurses
      run: |
        export LD_LIBRARY_PATH="/home/runner/opt/notcurses/lib:/home/runner/opt/fontconfig/lib"
        ./scripts/ci/Xvfb-contour-run.sh \
              "notcurses-demo-dumps/${{ matrix.name }}" \
              ~/opt/notcurses/bin/notcurses-demo \
                  -p ~/opt/notcurses/share/notcurses ${{ matrix.id }}
    - name: "Save dump"
      uses: actions/upload-artifact@v2
      with:
        name: notcurses-contour-dump
        path: notcurses-demo-dumps
        if-no-files-found: ignore
        retention-days: 3
    - name: "Check result success"
      run: |
        exit ${{ steps.Xvfb-contour-notcurses.outputs.exitCode }}

  check_notcurses_test_matrix:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: tests matrix
    needs: test_notcurses
    steps:
    - name: Check build matrix status
      if: ${{ needs.test_notcurses.result != 'success' }}
      run: exit 1

  # }}}
