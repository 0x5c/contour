# vim:et:ts=2:sw=2

on:
  push:
    # Do not run release CI on release tags, as release tags are created *after* a release was finalized.
    # tags:
    #   - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
    branches:
      - 'release*'
      - 'prerelease*'
      - 'prerelease'
      - 'testing' # for public testing
      - 'gh-actions' # only for testing

name: Create Release

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

# TODO:
# [ ] run tests on each build (as last check before creating release)
# [ ] label package files with "prerelease" if they're not a release

jobs:
  chk_release:
    name: Release Checks
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Installing xmllint for ci-set-vars
        run: sudo apt -qy install libxml2-utils
      - name: set variables
        id: set_vars
        run: ./scripts/ci-set-vars.sh
        env:
          REPOSITORY: ${{ github.event.repository.name }}
      - name: run release checks
        run: ./scripts/check-release.sh

  build_windows:
    name: Build on Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: setup environment
        shell: powershell
        id: set_vars
        run: .\scripts\ci-set-vars.ps1
        env:
          REPOSITORY: ${{ github.event.repository.name }}
      - name: "Fetch embedded dependencies"
        shell: powershell
        run: |
          ./scripts/install-deps.ps1 --skip-vcpkg
          type ./_deps/sources/CMakeLists.txt
      - name: "vcpkg: Install dependencies"
        uses: lukka/run-vcpkg@v5
        id: runvcpkg
        with:
          vcpkgArguments: catch2 fmt freetype fontconfig harfbuzz yaml-cpp range-v3
          vcpkgDirectory: ${{ runner.workspace }}/vcpkg/
          vcpkgGitCommitId: e69dd972ba64840955f46704ecce6241bf607c0f
          vcpkgTriplet: x64-windows
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v3
        with:
          path: ../Qt
          key: ${{ runner.os }}-QtCache
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          #version: "6.4.*"
          version: "5.15.*"
          #modules: qtmultimedia
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      - name: "create build directory"
        run: mkdir build
      - name: "Generate build files"
        run: cmake -DCMAKE_BUILD_TYPE=Release -DCONTOUR_BUILD_WITH_QT6=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_TOOLCHAIN_FILE="${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows -DLIBTERMINAL_TESTING=OFF -DLIBUNICODE_TESTING=OFF -B build .
      - name: "Build"
        run: cmake --build build/ --config Release
      - name: "Create Package(s)"
        run: cd build ; cpack
      - name: inspect
        run: Get-ChildItem -Recurse
      - name: "Rename packages"
        run: |
          mv "build\Contour-${{ steps.set_vars.outputs.version }}-win64.msi" "contour-${{ steps.set_vars.outputs.version }}-win64.msi"
          mv "build\Contour-${{ steps.set_vars.outputs.version }}-win64.zip" "contour-${{ steps.set_vars.outputs.version }}-win64.zip"
      - name: "Inspect again"
        run: Get-ChildItem
      - name: "Uploading MSI to artifact store"
        uses: actions/upload-artifact@v2
        with:
          path: contour-${{ steps.set_vars.outputs.version }}-win64.msi
          retention-days: 7
      - name: "Uploading ZIP to artifact store"
        uses: actions/upload-artifact@v2
        with:
          path: contour-${{ steps.set_vars.outputs.version }}-win64.zip
          retention-days: 7

  build_osx:
    name: Build on OS/X
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v3
      - name: set variables
        id: set_vars
        run: ./scripts/ci-set-vars.sh
        env:
          REPOSITORY: ${{ github.event.repository.name }}
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ccache-osx_qt5-release
          max-size: 256M
      - name: "Install dependencies"
        run: |
          set -ex
          #brew update
          ./scripts/install-deps.sh
          brew install qt${QTVER} openssl
        env:
          QTVER: '5'
      - name: "Create build directory"
        run: mkdir build
      - name: "Generate build files"
        run: |
          cmake . \
                -DCMAKE_BUILD_TYPE=RelWithDebInfo \
                -DQt5_DIR="$(brew --prefix qt5)/lib/cmake/Qt5" \
                -DCONTOUR_BUILD_WITH_QT6=OFF \
                -B build/
      - name: "Build"
        run: cmake --build build/
      - name: "test: libcrispy"
        run: ./build/src/crispy/crispy_test
      - name: "test: libterminal"
        run: ./build/src/vtbackend/terminal_test
      - name: inspect
        run: |
          find build/ -print
          echo "TODO: upload to artifact store"
      - name: "Create Package(s)"
        run: |
          set -ex
          cd build
          sudo cpack -G "DragNDrop;ZIP"
          ls -hl
          BASENAME="contour-${{ steps.set_vars.outputs.version }}-osx"
          mv -vf "Contour-${{ steps.set_vars.outputs.VERSION_STRING }}-Darwin.zip" "../${BASENAME}.zip"
          mv -vf "Contour-${{ steps.set_vars.outputs.VERSION_STRING }}-Darwin.dmg" "../${BASENAME}.dmg"
      - name: upload to artifact store (ZIP)
        uses: actions/upload-artifact@v2
        with:
          path: contour-${{ steps.set_vars.outputs.version }}-osx.zip
          retention-days: 7
      - name: upload to artifact store (DMG)
        uses: actions/upload-artifact@v2
        with:
          path: contour-${{ steps.set_vars.outputs.version }}-osx.dmg
          retention-days: 7

  build_archlinux:
    strategy:
      matrix:
        arch:
          [
              "linux/amd64 x86_64",
              "linux/arm64/v8 aarch64",
          ]
    name: "Archlinux ${{ matrix.arch }}"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
      - name: Read info
        id: tags
        shell: bash
        run: |
          arch="${{ matrix.arch }}"
          echo "PLATFORM=${arch%% *}" >> "$GITHUB_OUTPUT"
          echo "ARCH=${arch##* }" >> "$GITHUB_OUTPUT"
      - name: Installing xmllint for ci-set-vars
        run: sudo apt -qy install libxml2-utils
      - name: set environment variables
        id: set_vars
        run: ./scripts/ci-set-vars.sh
        env:
          REPOSITORY: ${{ github.event.repository.name }}
      - name: Build ${{ matrix.arch }} release
        shell: bash
        run: |
          docker buildx build --platform ${{ steps.tags.outputs.PLATFORM }} \
          --tag contour:${{ steps.tags.outputs.ARCH }} \
          -f .github/archlinux/Dockerfile \
          --load \
          .
          docker create --name contour-${{ steps.tags.outputs.ARCH }} contour:${{ steps.tags.outputs.ARCH }}
          docker cp contour-${{ steps.tags.outputs.ARCH }}:/app/contour.pkg.tar.zst contour-${{ steps.tags.outputs.ARCH }}.pkg.tar.zst
          docker container rm contour-${{ steps.tags.outputs.ARCH }}
          mv "contour-${{ steps.tags.outputs.ARCH }}.pkg.tar.zst" \
              contour_${{ steps.set_vars.outputs.version }}-archlinux_${{ steps.tags.outputs.ARCH }}
      - name: "Uploading Archlinux .pkg.tar.zst package"
        uses: actions/upload-artifact@v2
        with:
          path: contour_${{ steps.set_vars.outputs.version }}-archlinux_${{ steps.tags.outputs.ARCH }}
          if-no-files-found: error
          retention-days: 7

  build_fedora:
    strategy:
      matrix:
        os_version: [36, 37]
        arch:
          [
            "linux/amd64 x86_64"
          ]
    name: "Fedora ${{ matrix.os_version }} ${{ matrix.arch }}"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
      with:
        version: latest
    - name: Read matrix info
      id: tags
      shell: bash
      run: |
        arch="${{ matrix.arch }}"
        echo "PLATFORM=${arch%% *}" >> "$GITHUB_OUTPUT"
        echo "ARCH=${arch##* }" >> "$GITHUB_OUTPUT"
    - name: Installing xmllint for ci-set-vars
      run: sudo apt -qy install libxml2-utils
    - name: set environment variables
      id: set_vars
      run: ./scripts/ci-set-vars.sh
      env:
        REPOSITORY: ${{ github.event.repository.name }}
    - name: Fetch and unpack embeds
      run: ./scripts/install-deps.sh
      env:
        PREPARE_ONLY_EMBEDS: 'ON'
        SYSDEP_ASSUME_YES: 'ON'
        OS_OVERRIDE: 'fedora'
    - name: "Post-fix embedded dependency permissions."
      run: sudo find _deps/sources -exec chown $UID {} \;
    - name: prepare distfile
      run: |
        set -x
        PKGNAME="contour-${{ steps.set_vars.outputs.VERSION }}"
        DISTDIR="/tmp/dist/${PKGNAME}"
        mkdir -p ${DISTDIR}
        cp -rvp . ${DISTDIR}
        tar czpf ${PKGNAME}.tar.gz -C "/tmp/dist" .
    - name: Build ${{ matrix.arch }} release
      shell: bash
      run: |
        set -x
        ARCH="${{ steps.tags.outputs.ARCH }}"
        VERSION="${{ steps.set_vars.outputs.VERSION }}"
        OS_VERSION="${{ matrix.os_version }}"
        sed -i -e "s/fedora:35/fedora:${{ matrix.os_version }}/" .github/fedora/Dockerfile
        docker buildx build --platform ${{ steps.tags.outputs.PLATFORM }} \
                --tag contour:${ARCH} \
                --build-arg VERSION=${VERSION} \
                --build-arg VERSION_STRING=${VERSION} \
                -f .github/fedora/Dockerfile \
                --load \
                .
        docker create --name contour-${ARCH} contour:${ARCH}
        docker cp contour-${ARCH}:/app/rpmbuild/RPMS/${ARCH}/contour-${VERSION}-1.fc${OS_VERSION}.${ARCH}.rpm \
                  contour-${VERSION}-1.fc${OS_VERSION}.${ARCH}.rpm
        docker cp contour-${ARCH}:/app/rpmbuild/RPMS/${ARCH}/contour-debuginfo-${VERSION}-1.fc${OS_VERSION}.${ARCH}.rpm \
                  contour-debuginfo-${VERSION}-1.fc${OS_VERSION}.${ARCH}.rpm
        docker cp contour-${ARCH}:/app/rpmbuild/RPMS/${ARCH}/contour-debugsource-${VERSION}-1.fc${OS_VERSION}.${ARCH}.rpm \
                  contour-debugsource-${VERSION}-1.fc${OS_VERSION}.${ARCH}.rpm
        docker container rm contour-${{ steps.tags.outputs.ARCH }}
        echo "pwd: `pwd`" && ls -hla
    - name: "Uploading Fedora RPM package"
      uses: actions/upload-artifact@v2
      with:
        path: "contour-${{ steps.set_vars.outputs.VERSION }}-1.fc${{ matrix.os_version }}.${{ steps.tags.outputs.ARCH }}.rpm"
        if-no-files-found: error
        retention-days: 7
    - name: "Uploading Fedora RPM package (debuginfo)"
      uses: actions/upload-artifact@v2
      with:
        path: "contour-debuginfo-${{ steps.set_vars.outputs.VERSION }}-1.fc${{ matrix.os_version }}.${{ steps.tags.outputs.ARCH }}.rpm"
        if-no-files-found: error
        retention-days: 7
    - name: "Uploading Fedora RPM package (debugsource)"
      uses: actions/upload-artifact@v2
      with:
        path: "contour-debugsource-${{ steps.set_vars.outputs.VERSION }}-1.fc${{ matrix.os_version }}.${{ steps.tags.outputs.ARCH }}.rpm"
        if-no-files-found: error
        retention-days: 7

  # Create AppImage (Using Ubuntu 18.04 as base).
  package_for_AppImage:
    name: "Packaging for AppImage"
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v3
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: "ccache-ubuntu1804-AppImage"
          max-size: 256M
      - name: Remove GCC-11 to not mess with AppImage on stock Ubuntu 18.04
        run: |
          sudo apt-get autoremove -y libgcc-9-dev gcc-9 libgcc-10-dev gcc-10 libgcc-11-dev gcc-11
          sudo apt-get install --allow-downgrades --no-remove --reinstall -y libstdc++6=8.4.0-1ubuntu1~18.04
      - name: Updating APT package database
        run: sudo apt -q update && sudo apt upgrade -y
      - name: Installing xmllint for ci-set-vars
        run: sudo apt -qy install libxml2-utils
      - name: "set environment variables"
        id: set_vars
        run: ./scripts/ci-set-vars.sh
        env:
          REPOSITORY: ${{ github.event.repository.name }}
      - name: "install linuxdeploy"
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage -O /usr/local/bin/linuxdeploy
          chmod 0755 /usr/local/bin/linuxdeploy
      - name: "install libfuse2 (Dependency of AppImage programs)"
        run: sudo apt -qy install libfuse2
      - name: "install dependencies"
        run: sudo ./scripts/install-deps.sh
      - name: "Post-fix embedded dependency permissions."
        run: sudo find _deps/sources -exec chown $UID {} \;
      - name: "install GCC 10"
        run: sudo apt install g++-10
      - name: "cmake"
        run: |
          mkdir build
          BUILD_DIR="build" \
            CXX="g++-10" \
            CMAKE_BUILD_TYPE=RelWithDebInfo \
            EXTRA_CMAKE_FLAGS="$EXTRA_CMAKE_FLAGS \
                               -DCMAKE_INSTALL_PREFIX="/usr" \
                               -DCONTOUR_INSTALL_TOOLS=ON \
                               -DPEDANTIC_COMPILER=ON \
                               -DPEDANTIC_COMPILER_WERROR=OFF \
                               " \
            ./scripts/ci-prepare-contour.sh
      - name: "build"
        run: cmake --build build/ -- -j3
      - name: "test: crispy"
        run: ./build/src/crispy/crispy_test
      - name: "test: libterminal"
        run: ./build/src/vtbackend/terminal_test
      - name: "linuxdeploy: Creating AppImage"
        run: |
          set -ex
          cd build
          make install DESTDIR=AppDir
          linuxdeploy --appdir AppDir --output appimage
          mv -v *.AppImage ../contour-${{ steps.set_vars.outputs.VERSION_STRING }}.x86_64.AppImage
      - name: "Testing AppImage"
        run: ./contour-${{ steps.set_vars.outputs.VERSION_STRING }}.x86_64.AppImage version
      - name: "Uploading AppImage"
        uses: actions/upload-artifact@v2
        with:
          path: "contour-${{ steps.set_vars.outputs.VERSION_STRING }}.x86_64.AppImage"
          if-no-files-found: error
          retention-days: 7

  package_for_Ubuntu:
    name: "Packaging for Ubuntu ${{ matrix.os_version }}"
    strategy:
      fail-fast: false
      matrix:
        os_version: ['18.04', '20.04', '22.04']
    runs-on: ubuntu-${{ matrix.os_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Updating APT package database
        run: sudo apt -q update && sudo apt upgrade -y
      - name: Installing xmllint for ci-set-vars
        run: sudo apt -qy install libxml2-utils
      - name: set variables
        id: set_vars
        run: ./scripts/ci-set-vars.sh
        env:
          REPOSITORY: ${{ github.event.repository.name }}
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: "ccache-ubuntu-${{ matrix.os_version }}"
          max-size: 256M
      - name: set QTVER
        id: set_qtver
        run: |
          # Recent Ubuntu versions ship with Qt 6. Use it.
          # TODO: I mean, use it ASAP. :-)
          if [[ ${{ matrix.os_version }} = "22.04" ]]; then
            echo "QTVER=5" >> "$GITHUB_OUTPUT"
          fi
      - name: "install dependencies"
        run: sudo env QTVER="${{ steps.set_qtver.outputs.QTVER }}" ./scripts/install-deps.sh
      - name: "Post-fix embedded dependency permissions."
        run: sudo find _deps/sources -exec chown $UID {} \;
      - name: "install GCC 10"
        if: ${{ startsWith(matrix.OS_VERSION, '18.04') }}
        run: sudo apt install g++-10
      - name: "create build directory"
        run: mkdir build
      - name: "cmake"
        run: |
          # TODO: turn on -Werror again, that requires some code changes.
          CMAKE_CXX_STANDARD=20
          if [[ "${{ matrix.os_version }}" = "18.04" ]]; then
            CMAKE_CXX_STANDARD=17
            EXTRA_CMAKE_FLAGS="$EXTRA_CMAKE_FLAGS -DCONTOUR_INSTALL_TOOLS=ON"
            export CXX="g++-10"
          fi
          BUILD_DIR="build" \
            CMAKE_BUILD_TYPE=RelWithDebInfo \
            EXTRA_CMAKE_FLAGS="$EXTRA_CMAKE_FLAGS \
                               -DCMAKE_CXX_STANDARD=$CMAKE_CXX_STANDARD \
                               -DCMAKE_INSTALL_PREFIX="/usr" \
                               -DCONTOUR_INSTALL_TOOLS=ON \
                               -DPEDANTIC_COMPILER=ON \
                               -DPEDANTIC_COMPILER_WERROR=OFF \
                               " \
            ./scripts/ci-prepare-contour.sh
      - name: "build"
        run: cmake --build build/ -- -j3
      - name: "test: crispy"
        run: ./build/src/crispy/crispy_test
      - name: "test: libterminal"
        run: ./build/src/vtbackend/terminal_test
      - name: "CPack: Creating DEB package"
        run: |
          set -ex
          cd build
          cpack -G DEB -V
          OS_VERSION=${{ matrix.os_version }}
          OS_VERSION=${OS_OVERRIDE/./_}
          mv -v "Contour-${{ steps.set_vars.outputs.VERSION_STRING }}-Linux-contour.deb" \
                "../contour-${{ steps.set_vars.outputs.VERSION_STRING }}-ubuntu${{ matrix.os_version }}-amd64.deb"
          mv -v "Contour-${{ steps.set_vars.outputs.VERSION_STRING }}-Linux-contour-dbgsym.ddeb" \
                "../contour-dbgsym-${{ steps.set_vars.outputs.VERSION_STRING }}-ubuntu${{ matrix.os_version }}-amd64.ddeb"
      - name: "Uploading artifact .deb package"
        uses: actions/upload-artifact@v3.1.0
        with:
          path: "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-ubuntu${{ matrix.os_version }}-amd64.deb"
          if-no-files-found: error
          retention-days: 7
      - name: "Uploading artifact .ddeb package (debugging symbols)"
        uses: actions/upload-artifact@v3.1.0
        with:
          path: "contour-dbgsym-${{ steps.set_vars.outputs.VERSION_STRING }}-ubuntu${{ matrix.os_version }}-amd64.ddeb"
          if-no-files-found: error
          retention-days: 7
      - name: "Attempt installing the created .deb"
        run: |
          sudo dpkg --install "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-ubuntu${{ matrix.os_version }}-amd64.deb"
          sudo dpkg --install "contour-dbgsym-${{ steps.set_vars.outputs.VERSION_STRING }}-ubuntu${{ matrix.os_version }}-amd64.ddeb"

  # {{{ Release
  do_release:
    name: Create Github release
    runs-on: ubuntu-latest
    needs: [chk_release, package_for_AppImage, package_for_Ubuntu, build_windows, build_osx, build_archlinux, build_fedora]
    steps:
      - uses: actions/checkout@v3
      - name: Installing xmllint for ci-set-vars
        run: sudo apt -qy install libxml2-utils
      - name: set variables
        id: set_vars
        run: ./scripts/ci-set-vars.sh
        env:
          REPOSITORY: ${{ github.event.repository.name }}
      - name: fetch release artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifact

      - name: "inspect"
        run: ls -lisahF
      - name: inspect recurse
        run: pwd; ls -hlaR

      # -------------------------------------------------------------
      - name: Create Github release page
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # token provided by Actions
        with:
          tag_name: v${{ steps.set_vars.outputs.version }}${{ steps.set_vars.outputs.tag_suffix}}
          name: Contour ${{ steps.set_vars.outputs.version }} ${{ steps.set_vars.outputs.RELEASENAME_SUFFIX}}
          body_path: ${{ github.workspace }}/release-body.md
          draft: true
          prerelease: ${{ steps.set_vars.outputs.IS_PRERELEASE }}
          fail_on_unmatched_files: true
          files: |
            *.deb
            *.ddeb
            *.rpm
            *.dmg
            *.msi
            *-archlinux*
            *.AppImage
            *.zip
  # }}}
