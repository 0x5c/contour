name: Build

on:
  push:
    paths-ignore:
    - 'docs/**'
    - '.github/ISSUE_TEMPLATE/**'
    - '.github/*.yml'
    - 'LICENSE.txt'
    - '*.md'
    - '*.sh'
    branches:
    - master
  pull_request:
    branches:
    - master

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  CTEST_OUTPUT_ON_FAILURE: 1
  CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm_modules

jobs:
  ubuntu_2004_no_kwin:
    name: "Ubuntu Linux 20.04 (no KWin)"
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: "**/cpm_modules"
        key: ${{github.workflow}}-cpm-modules-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
    - name: "install dependencies"
      run: |
        set -ex
        sudo apt -q update
        sudo ./scripts/install-deps.sh
    - name: "create build directory"
      run: mkdir build
    - name: "cmake"
      run: |
        BUILD_DIR="build" \
          CMAKE_BUILD_TYPE="Release" \
          CXX="g++-9" \
          ./scripts/ci-prepare-contour.sh
    - name: "build"
      run: cmake --build build/ -- -j3
    - name: "test: crispy"
      run: ./build/src/crispy/crispy_test
    - name: "test: libterminal"
      run: ./build/src/terminal/terminal_test

  ubuntu_2004_no_kwin_with_harfbuzz:
    name: "Ubuntu Linux 20.04 (no KWin, builtin FreeType and HarfBuzz)"
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: "**/cpm_modules"
        key: ${{github.workflow}}-cpm-modules-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
    - name: "install dependencies"
      run: |
        set -ex
        sudo apt -q update
        sudo ./scripts/install-deps.sh
    - name: "create build directory"
      run: mkdir build
    - name: "cmake"
      run: |
        BUILD_DIR="build" \
          CMAKE_BUILD_TYPE="Release" \
          EXTRA_CMAKE_FLAGS="-DCONTOUR_BUILD_WITH_EMBEDDED_FT_HB=ON" \
          CXX="g++-9" \
          ./scripts/ci-prepare-contour.sh
    - name: "build"
      run: cmake --build build/ -- -j3
    - name: "test: crispy"
      run: ./build/src/crispy/crispy_test
    - name: "test: libterminal"
      run: ./build/src/terminal/terminal_test

  check_PR_TODOs:
    name: "Check PR TODO's"
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: "Checking for open PR-related TODO's"
      run: |
        set -ex
        ./scripts/check-pr-todos.sh

  ubuntu_2004:
    name: "Ubuntu Linux 20.04"
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: "**/cpm_modules"
        key: ${{github.workflow}}-cpm-modules-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
    - name: set environment variables
      id: set_vars
      run: ./scripts/ci-set-vars.sh
      env:
        REPOSITORY: ${{ github.event.repository.name }}
    - name: "install dependencies"
      run: |
        set -ex
        sudo apt -q update
        sudo ./scripts/install-deps.sh
    - name: "create build directory"
      run: mkdir build
    - name: "cmake"
      run: |
        BUILD_DIR="build" \
          CMAKE_BUILD_TYPE="RelWithDebInfo" \
          CXX="g++-9" \
          EXTRA_CMAKE_FLAGS="-DCONTOUR_BLUR_PLATFORM_KWIN=ON" \
          ./scripts/ci-prepare-contour.sh
    - name: "build"
      run: cmake --build build/ -- -j3
    - name: "test: crispy"
      run: ./build/src/crispy/crispy_test
    - name: "test: libterminal"
      run: ./build/src/terminal/terminal_test
    - name: "CPack: Creating DEB & TGZ package"
      run: |
        set -ex
        cd build/
        cpack -G DEB
        cpack -G TGZ
        cd ..
        mv -v "build/Contour-${{ steps.set_vars.outputs.VERSION_STRING }}-Linux.deb" \
              "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-ubuntu_20_04_amd64.deb"
        tar xzpf "build/Contour-${{ steps.set_vars.outputs.VERSION_STRING }}-Linux.tar.gz"
        mv -v "Contour-${{ steps.set_vars.outputs.VERSION_STRING }}-Linux" \
              "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-ubuntu_20_04_amd64"
        ls -hl
    - name: "Uploading artifact .deb package"
      uses: actions/upload-artifact@v2
      with:
        name: "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-ubuntu_20_04_amd64.deb"
        path: "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-ubuntu_20_04_amd64.deb"
        if-no-files-found: error
        retention-days: 7
    - name: "Uploading artifact ZIP package"
      uses: actions/upload-artifact@v2
      with:
        name: "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-ubuntu_20_04_amd64"
        path: "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-ubuntu_20_04_amd64"
        if-no-files-found: error
        retention-days: 7

  ubuntu1804:
    name: "Ubuntu Linux 18.04"
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: "**/cpm_modules"
        key: ${{github.workflow}}-cpm-modules-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
    - name: set environment variables
      id: set_vars
      run: ./scripts/ci-set-vars.sh
      env:
        REPOSITORY: ${{ github.event.repository.name }}
    - name: "install dependencies"
      run: |
        set -ex
        sudo apt -q update
        sudo ./scripts/install-deps.sh
    - name: "Get specific version CMake, v3.18.3"
      uses: lukka/get-cmake@v3.18.3
    - name: "create build directory"
      run: mkdir build
    - name: "cmake"
      run: |
        BUILD_DIR="build" \
          CMAKE_BUILD_TYPE="Release" \
          CXX="g++-8" \
          EXTRA_CMAKE_FLAGS="-DCONTOUR_BLUR_PLATFORM_KWIN=ON -DUSE_BOOST_FILESYSTEM=ON" \
          ./scripts/ci-prepare-contour.sh
    - name: "build"
      run: cmake --build build/ -- -j3
    - name: "test: crispy"
      run: ./build/src/crispy/crispy_test
    - name: "test: libterminal"
      run: ./build/src/terminal/terminal_test
    - name: "CPack: Creating TGZ package"
      run: |
        set -ex
        cd build/
        cpack -G DEB
        cpack -G TGZ
        cd ..
        # CPack DEB:
        mv -v "build/Contour-${{ steps.set_vars.outputs.VERSION_STRING }}-Linux.deb" \
              "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-ubuntu_18_04_amd64.deb"
        # CPack TGZ:
        tar xzpf "build/Contour-${{ steps.set_vars.outputs.VERSION_STRING }}-Linux.tar.gz"
        mv -v "Contour-${{ steps.set_vars.outputs.VERSION_STRING }}-Linux" \
              "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-ubuntu_18_04_amd64"
        echo "pwd: `pwd`" && ls -hl
    - name: "Uploading artifact .deb package"
      uses: actions/upload-artifact@v2
      with:
        name: "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-ubuntu_18_04_amd64.deb"
        path: "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-ubuntu_18_04_amd64.deb"
        if-no-files-found: error
        retention-days: 7
    - name: "Uploading artifact ZIP package"
      uses: actions/upload-artifact@v2
      with:
        name: "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-ubuntu_18_04_amd64"
        path: "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-ubuntu_18_04_amd64"
        if-no-files-found: error
        retention-days: 7

  osx_qt5:
    name: "OS/X (Qt5)"
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: "**/cpm_modules"
        key: ${{github.workflow}}-cpm-modules-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
    - name: set variables
      id: set_vars
      run: ./scripts/ci-set-vars.sh
      env:
        REPOSITORY: ${{ github.event.repository.name }}
    - name: "Install dependencies"
      run: |
        set -ex
        #brew update
        ./scripts/install-deps.sh
        brew install qt5
    - name: "Create build directory"
      run: mkdir build
    - name: "Generate build files"
      run: |
        cmake . \
              -DCMAKE_BUILD_TYPE=Release \
              -DQt5_DIR="$(brew --prefix qt5)/lib/cmake/Qt5" \
              -B build/
    - name: "Build"
      run: cmake --build build/
    - name: "test: libcrispy"
      run: ./build/src/crispy/crispy_test
    - name: "test: libterminal"
      run: ./build/src/terminal/terminal_test
    - name: "Create Package(s)"
      run: |
        set -ex
        cd build
        sudo cpack
        BASENAME="contour-${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-osx"
        echo "pwd: `pwd`:" && ls -hl
        mv -vf "Contour-${{ steps.set_vars.outputs.VERSION_STRING }}-Darwin.zip" "../${BASENAME}.zip"
        mv -vf "Contour-${{ steps.set_vars.outputs.VERSION_STRING }}-Darwin.dmg" "../${BASENAME}.dmg"
    - name: Upload to artifact store (DMG)
      uses: actions/upload-artifact@v2
      with:
        name: contour-${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-osx.dmg
        path: contour-${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-osx.dmg
        if-no-files-found: error
        retention-days: 7

  osx_qt6:
    name: "OS/X (Qt6)"
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: "**/cpm_modules"
        key: ${{github.workflow}}-cpm-modules-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
    - name: set variables
      id: set_vars
      run: ./scripts/ci-set-vars.sh
      env:
        REPOSITORY: ${{ github.event.repository.name }}
    - name: "Install dependencies"
      run: |
        set -ex
        #brew update
        ./scripts/install-deps.sh
        brew install qt6
    - name: "Create build directory"
      run: mkdir build
    - name: "Generate build files"
      run: |
        cmake . \
              -DCMAKE_BUILD_TYPE=Release \
              -DYAML_BUILD_SHARED_LIBS=OFF -DYAML_CPP_BUILD_CONTRIB=OFF \
              -DYAML_CPP_BUILD_TESTS=OFF -DYAML_CPP_BUILD_TOOLS=OFF \
              -DYAML_CPP_INSTALL=OFF \
              -DCONTOUR_BUILD_WITH_QT6=ON \
              -B build/
    - name: "Build"
      run: cmake --build build/
    - name: "test: libcrispy"
      run: ./build/src/crispy/crispy_test
    - name: "test: libterminal"
      run: ./build/src/terminal/terminal_test

  windows:
    name: "Windows"
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: "**/cpm_modules"
        key: ${{github.workflow}}-cpm-modules-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
    - name: setup environment
      shell: powershell
      id: set_vars
      run: .\scripts\ci-set-vars.ps1
      env:
        REPOSITORY: ${{ github.event.repository.name }}
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
    - name: "vcpkg: Install dependencies"
      uses: lukka/run-vcpkg@v5
      id: runvcpkg
      with:
        vcpkgArguments: freetype fontconfig harfbuzz angle
        vcpkgDirectory: ${{ runner.workspace }}/vcpkg/
        vcpkgGitCommitId: 69478c5caafcde4c490bb1fccb960296801dbb5f
        vcpkgTriplet: x64-windows
    - name: "create build directory"
      shell: powershell
      run: |
        If (!(Test-Path build))
        {
              New-Item -ItemType Directory -Force -Path build
        }
    - name: "Generate build files"
      run: cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows -DYAML_BUILD_SHARED_LIBS=OFF -DCONTOUR_EXAMPLES=OFF -DLIBTERMINAL_TESTING=ON -DLIBUNICODE_TESTING=ON -DYAML_CPP_BUILD_CONTRIB=OFF -DYAML_CPP_BUILD_TESTS=OFF -DYAML_CPP_BUILD_TOOLS=OFF -DYAML_CPP_INSTALL=OFF -B build .
    - name: "Build"
      run: cmake --build build/ --config Release
    - name: "test: libcrispy"
      run: .\build\src\crispy\Release\crispy_test.exe
    - name: "test: libterminal"
      run: .\build\src\terminal\Release\terminal_test.exe
    - name: "Create Package(s)"
      shell: powershell
      run: |
        cd build
        cpack
        type "_CPack_Packages/win64/WIX/wix.log"
    - name: inspect
      run: Get-ChildItem -Recurse
    - name: "Rename packages"
      run: |
        mv "build\Contour-${{ steps.set_vars.outputs.version }}-win64.msi" "contour-${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-win64.msi"
        mv "build\Contour-${{ steps.set_vars.outputs.version }}-win64.zip" "contour-${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-win64.zip"
    - name: "Inspect again"
      run: Get-ChildItem
    - name: "Uploading MSI to artifact store"
      uses: actions/upload-artifact@v2
      with:
        name: contour-${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-win64.msi
        path: contour-${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-win64.msi
        if-no-files-found: error
        retention-days: 7

  archlinux:
    strategy:
      matrix:
        arch:
          [
            "linux/amd64 x86_64"
          ]
    name: "Archlinux ${{ matrix.arch }}"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
      with:
        platforms: all
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
      with:
        version: latest
    - name: Read info
      id: tags
      shell: bash
      run: |
        arch="${{ matrix.arch }}"
        echo ::set-output name=PLATFORM::${arch%% *}
        echo ::set-output name=ARCH::${arch##* }
    - name: set environment variables
      id: set_vars
      run: ./scripts/ci-set-vars.sh
      env:
        REPOSITORY: ${{ github.event.repository.name }}
    - name: Build ${{ matrix.arch }} release
      shell: bash
      run: |
        docker buildx build --platform ${{ steps.tags.outputs.PLATFORM }} \
        --tag contour:${{ steps.tags.outputs.ARCH }} \
        -f .github/archlinux/Dockerfile \
        --load \
        .
        docker create --name contour-${{ steps.tags.outputs.ARCH }} contour:${{ steps.tags.outputs.ARCH }}
        docker cp contour-${{ steps.tags.outputs.ARCH }}:/app/contour.pkg.tar.zst contour-${{ steps.tags.outputs.ARCH }}.pkg.tar.zst
        docker container rm contour-${{ steps.tags.outputs.ARCH }}
    - name: "Uploading Archlinux .pkg.tar.zst package"
      uses: actions/upload-artifact@v2
      with:
        name: "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-archlinux_${{ steps.tags.outputs.ARCH }}"
        path: "contour-${{ steps.tags.outputs.ARCH }}.pkg.tar.zst"
        if-no-files-found: error
        retention-days: 7

  # {{{ external test: notcurses

  build_notcurses:
    name: "Build notcurses"
    runs-on: ubuntu-20.04
    steps:
    - name: "install dependencies"
      run: |
        set -ex
        sudo apt -q update
        sudo apt install -y \
                    build-essential \
                    cmake \
                    doctest-dev \
                    ffmpeg \
                    libavcodec-dev \
                    libavformat-dev \
                    libavutil-dev \
                    libdeflate-dev \
                    libncurses-dev \
                    libqrcodegen-dev \
                    libswscale-dev \
                    libunistring-dev \
                    xvfb
    - name: "git clone"
      run: git clone https://github.com/dankamongmen/notcurses.git
    - name: "configure cmake"
      run: |
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX=~/opt/notcurses \
              -DUSE_CPP=OFF \
              -DUSE_DEFLATE=OFF \
              -DUSE_MULTIMEDIA=ffmpeg \
              -DUSE_PANDOC=OFF \
              -DUSE_STATIC=ON \
              -S notcurses \
              -B notcurses/build
    - name: "Build notcurses"
      run: cmake --build notcurses/build/ -- -j3
    - name: "Install notcurses"
      run: cmake --build notcurses/build --config Release --target install/strip
    - name: "Uploading artifact"
      uses: actions/upload-artifact@v2
      with:
        name: "notcurses-install"
        path: ~/opt/notcurses
        if-no-files-found: error
        retention-days: 1

  test_notcurses:
    name: "external: notcurses-demo ${{ matrix.name }}"
    runs-on: ubuntu-20.04
    needs: [ubuntu_2004, build_notcurses]
    strategy:
      fail-fast: false
      matrix:
        # ixetunchmdbkywjgarvlsfqzo
        include:
          - name: 'aanimate'
            id: 'a'
          - name: 'box'
            id: 'b'
          - name: 'chunli'
            id: 'c'
          - name: 'dragon'
            id: 'd'
          - name: 'eagle'
            id: 'e'
          - name: 'fission'
            id: 'f'
          - name: 'grid'
            id: 'g'
          - name: 'highcon'
            id: 'h'
          - name: 'intro'
            id: 'i'
          - name: 'jungle'
            id: 'j'
          - name: 'keller'
            id: 'k'
          - name: 'luigi'
            id: 'l'
          - name: 'mojibake'
            id: 'm'
          - name: 'normal'
            id: 'n'
          - name: 'outro'
            id: 'o'
          - name: 'qrcode'
            id: 'q'
          - name: 'reel'
            id: 'r'
          - name: 'sliders'
            id: 's'
          - name: 'trans'
            id: 't'
          - name: 'uniblock'
            id: 'u'
          - name: 'view'
            id: 'v'
          - name: 'whiteout'
            id: 'w'
          - name: 'xray'
            id: 'x'
          - name: 'yield'
            id: 'y'
          - name: 'zoo'
            id: 'z'
    env:
      LD_LIBRARY_PATH: /home/runner/opt/notcurses/lib
    steps:
    - uses: actions/checkout@v2
    - name: set environment variables
      id: set_vars
      run: ./scripts/ci-set-vars.sh
      env:
        REPOSITORY: ${{ github.event.repository.name }}
    - uses: actions/download-artifact@v2
      with:
        name: "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-ubuntu_20_04_amd64.deb"
    - uses: actions/download-artifact@v2
      with:
        name: "notcurses-install"
        path: ~/opt/notcurses
    - name: "notcurses-install: fix executable bits"
      run: chmod 0755 ~/opt/notcurses/bin/*
    - name: "install dependencies"
      run: .github/workflows/notcurses-install-deps.sh
    - name: "Run notcurses-demo -h"
      timeout-minutes: 1
      run: ~/opt/notcurses/bin/notcurses-demo -p ~/opt/notcurses/share/notcurses -h
    - name: "install contour"
      run: sudo dpkg -i "contour-${{ steps.set_vars.outputs.VERSION_STRING }}-ubuntu_20_04_amd64.deb"
    - name: "contour executable test"
      run: |
        contour version
        contour help
        ls -hl ~/opt/notcurses/
    - name: "Run Contour: notcurses-demo ${{ matrix.name }}"
      timeout-minutes: 5
      id: Xvfb-contour-notcurses
      run: |
        .github/workflows/Xvfb-contour-run.sh  \
              ~/opt/notcurses/bin/notcurses-demo \
                  -p ~/opt/notcurses/share/notcurses ${{ matrix.id }}
    - name: "Save dump"
      uses: actions/upload-artifact@v2
      with:
        name: notcurses-contour-dump
        path: ~/.local/state/contour
        if-no-files-found: ignore
        retention-days: 3
    - name: "Check result success"
      run: |
        exit ${{ steps.Xvfb-contour-notcurses.outputs.exitCode }}

  check_notcurses_test_matrix:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: external tests (matrix)
    needs: test_notcurses
    steps:
    - name: Check build matrix status
      if: ${{ needs.test_notcurses.result != 'success' }}
      run: exit 1

  # }}}

